{"version":3,"sources":["components/ImageWrapper/ImageWrapper.module.css","containers/Country/Country.module.css","containers/Country/CountryTable/CountryTable.module.css","containers/Patient/Patient.module.css","components/UI/Input/Input.module.css","containers/NewUser/NewUser.module.css","components/UI/Modal/Modal.module.css","components/UI/Backdrop/Backdrop.module.css","containers/Patient/PatientTable/PatientTable.module.css","axios.js","containers/Login/Login.js","containers/Home/Home.js","components/ImageWrapper/ImageWrapper.js","containers/Country/NewCountryForm/NewCountryForm.js","containers/Country/CountryTable/CountryTable.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","containers/Country/EditCountryForm/EditCountryForm.js","containers/Country/Country.js","components/UI/Input/Input.js","containers/Patient/NewPatientForm/NewPatientForm.js","containers/Patient/PatientTable/PatientTable.js","containers/Patient/EditPatientForm/EditPatientForm.js","containers/Patient/Patient.js","containers/NewUser/NewUser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","Login","state","username","password","onSubmit","e","preventDefault","user","post","then","res","console","log","data","window","localStorage","setItem","role","props","history","push","catch","err","alert","className","this","style","margin","type","id","placeholder","value","onChange","setState","target","onClick","Component","Home","onLogout","removeItem","location","reload","getItem","Fragment","to","ImageWrapper","classes","headerWrapper","header1","NewCountryForm","countryName","covidPositive","idvIndex","country","addNewCountry","htmlFor","checked","CountryTable","table","countries","scope","Hover","map","c","index","key","openModal","countryDevelopmentLevel","Table","backdrop","show","Backdrop","clicked","Modal","nextProps","nextState","children","modalClosed","transform","opacity","EditCountryForm","updatedCountry","updateCountry","textAlign","closeModal","Country","modalOpen","selectedCountry","newCountry","i","length","get","menu","Form","Input","inputElement","inputClasses","invalid","shouldValidate","touched","Invalid","elementType","join","elementConfig","marginTop","changed","rows","cols","defaultValue","hidden","options","option","displayValue","marginRight","label","NewPatientForm","form","name","validation","valid","loading","lastName","countryId","covidPositiveContact","hasCold","lastFever","respiratoryRate","hypoxia","hasSoreThroat","hasCough","hasDyspnea","hasTachypnea","acl","pneumonia","oxygenSaturation","nonHospitalPneumonia","countriesVisited","countriesSelected","contactedPatients","patientsSelected","inputChangedHandler","event","inputIdentifier","updatedForm","updatedFormElement","onFormSubmit","formData","formElementIdentifier","cSelected","pSelected","p","countryOptions","visitedCountries","updatedElement","updatedElementConfig","formElementsArray","config","formElement","sel","labelledBy","PatientTable","patients","covidStatus","EditPatientForm","patient","lastname","cold","soreThroat","cough","dyspnea","tachypnea","alc","Patient","selectedPatient","NewUser","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.92eff6d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"ImageWrapper_headerWrapper__Ub6nl\",\"header1\":\"ImageWrapper_header1__3PAiB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Country_menu__38PIG\",\"Form\":\"Country_Form__1Z-3J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hover\":\"CountryTable_Hover__3wY98\",\"Table\":\"CountryTable_Table__-RlFk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Patient_menu__BTDEh\",\"Form\":\"Patient_Form__35hW5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__Cf7w9\",\"InputElement\":\"Input_InputElement__3d2uK\",\"Invalid\":\"Input_Invalid__2Ohhx\",\"Label\":\"Input_Label__1eQnU\",\"CheckBox\":\"Input_CheckBox__1sBEw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"NewUser_menu___3Ezp\",\"Form\":\"NewUser_Form__2xOBb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__1qp2p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__20Yvy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hover\":\"PatientTable_Hover__3jPGq\",\"Table\":\"PatientTable_Table__1A_rQ\"};","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:8080/'\r\n});\r\n\r\nexport default instance;","import React, { Component } from 'react';\r\nimport './Login.css';\r\nimport axios from '../../axios';\r\n\r\nclass Login extends Component {\r\n\r\n    state = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const user = { ...this.state };\r\n        axios.post(\"api/login\", user)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                window.localStorage.setItem(\"auth\", res.data.role);\r\n                this.props.history.push(\"/\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Login unsuccessful, try again.\")\r\n            });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\r\n                        <div className=\"card card-signin my-5\">\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title text-center\">Sign In</h5>\r\n                                <form className=\"form-signin\" onSubmit={this.onSubmit}>\r\n                                    <div className=\"row\" style={{ margin: '15px' }}>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"username\"\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Username\"\r\n                                            value={this.state.username}\r\n                                            onChange={e => this.setState({ username: e.target.value })} />\r\n                                    </div>\r\n\r\n                                    <div className=\"row\" style={{ margin: '15px' }}>\r\n\r\n                                        <input type=\"password\"\r\n                                            id=\"password\"\r\n                                            className=\"form-control\"\r\n                                            placeholder=\"Password\"\r\n                                            value={this.state.password}\r\n                                            onChange={e => this.setState({ password: e.target.value })}\r\n                                        />\r\n                                    </div>\r\n\r\n\r\n\r\n                                    <button className=\"btn btn-lg btn-primary btn-block text-uppercase\" type=\"submit\">Sign in</button>\r\n                                    <button className=\"btn btn-lg btn-primary btn-block text-uppercase\" type=\"button\" onClick={() => this.props.history.push(\"/\")}>Back</button>\r\n                                    <hr className=\"my-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n\r\n    // componentDidMount() {\r\n    //     if (!window.localStorage.getItem(\"auth\")) {\r\n    //         this.props.history.push(\"/login\");\r\n    //     }\r\n    // }\r\n\r\n    onLogout = () => {\r\n        window.localStorage.removeItem(\"auth\");\r\n        window.location.reload();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='wrapper'>\r\n                <div id='header' className='container'></div>\r\n                <div className='banner-wrapper'>\r\n                    <div id='banner' className='container'>\r\n                        <div className='title'>\r\n                            <h2>Pacient Triage COVID-19</h2>\r\n                        </div>\r\n                        <ul className='actions'>\r\n\r\n                            {!window.localStorage.getItem(\"auth\")\r\n                                ? <li><Link to=\"/login\" className='button'>LOGIN</Link></li>\r\n                                : <React.Fragment>\r\n                                    <li><button type=\"button\" className=\"button\" onClick={this.onLogout}>LOGOUT</button></li>\r\n                                    <li><Link to=\"/country\" className=\"button\">ADD NEW COUNTRY</Link></li>\r\n                                    <li><Link to=\"/patient\" className='button'>ADD NEW PATIENT</Link></li>\r\n                                    {window.localStorage.getItem(\"auth\") == 2 \r\n                                    ? <li><Link to=\"/new-user\" className='button'>ADD NEW USER</Link></li>\r\n                                    : null}\r\n                                </React.Fragment>}\r\n                        }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport classes from './ImageWrapper.module.css';\r\n\r\nconst ImageWrapper = () => {\r\n    return (\r\n        <div className={classes.headerWrapper}>\r\n            <div className={classes.header1 + \" container\"}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageWrapper;","import React, { Component } from 'react';\r\n// import classes from './NewCountryForm.module.css';\r\nimport axios from '../../../axios';\r\n\r\nclass NewCountryForm extends Component {\r\n\r\n    state = {\r\n        countryName: '',\r\n        covidPositive: false,\r\n        idvIndex: ''\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const country = { ...this.state }\r\n\r\n        axios.post(\"country/add\", country)\r\n            .then(res => {\r\n                this.props.addNewCountry(res.data);\r\n                alert(\"Country added successfully.\");\r\n                this.setState({countryName: '', covidPositive: false, idvIndex: ''});\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Error\");\r\n            });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"countryName\">Country name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"countryName\"\r\n                            placeholder=\"Enter country name\"\r\n                            value={this.state.countryName}\r\n                            onChange={e => this.setState({ countryName: e.target.value })} />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"idvIndex\">Country IDV</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            id=\"idvIndex\"\r\n                            placeholder=\"Enter country IDV index\"\r\n                            value={this.state.idvIndex}\r\n                            onChange={e => this.setState({ idvIndex: e.target.value })} />\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id=\"covidPositive\"\r\n                            value={this.state.covidPositive}\r\n                            onChange={e => this.setState({ covidPositive: e.target.checked })} />\r\n                        <label className=\"form-check-label\" htmlFor=\"covidPositive\">Country is COVID-19 positive</label>\r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewCountryForm;","import React from 'react';\r\nimport classes from './CountryTable.module.css';\r\n\r\nconst CountryTable = (props) => {\r\n\r\n    let table = null;\r\n\r\n    if (props.countries) {\r\n        table = (\r\n            <table className=\"table\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Development</th>\r\n                        <th scope=\"col\">Covid Positive</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className={classes.Hover}>\r\n                    {props.countries.map((c, index) => {\r\n                        return <tr key={c.countryName} onClick={() => props.openModal(c)}>\r\n                            <th scope=\"row\">{index + 1}</th>\r\n                            <td>{c.countryName}</td>\r\n                            <td>{c.countryDevelopmentLevel}</td>\r\n                            <td>{c.covidPositive ? \"YES\" : \"NO\"}</td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }else {\r\n        table = <p>Loading...</p>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Table}>\r\n            {table}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CountryTable;","import React from 'react';\r\n\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) => (\r\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\n\r\nimport classes from './Modal.module.css';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\n\r\nclass Modal extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Backdrop show={this.props.show} clicked={this.props.modalClosed} />\r\n                <div\r\n                    className={classes.Modal}\r\n                    style={{\r\n                        transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                        opacity: this.props.show ? '1' : '0'\r\n                    }}>\r\n                    {this.props.children}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;","import React, { Component } from 'react';\r\nimport axios from '../../../axios';\r\n\r\nclass EditCountryForm extends Component {\r\n\r\n    state = {\r\n        countryName: this.props.country.countryName,\r\n        covidPositive: this.props.country.covidPositive,\r\n        idvIndex: this.props.country.idvIndex\r\n    }\r\n\r\n    render() {\r\n\r\n        this.onSubmit = (e) => {\r\n            e.preventDefault();\r\n\r\n            let updatedCountry = {...this.state, id: this.props.country.id};\r\n\r\n            axios.post('country/modify', updatedCountry)\r\n                .then(res => {\r\n                    this.props.updateCountry(res.data);\r\n                })\r\n                .catch(err => console.log(err));\r\n\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <h5 style={{textAlign: 'center'}}>Edit Country</h5>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"countryNameEdit\">Country name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"countryNameEdit\"\r\n                            placeholder=\"Enter country name\"\r\n                            value={this.state.countryName}\r\n                            onChange={e => this.setState({ countryName: e.target.value })} />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"idvIndexEdit\">Country IDV</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            id=\"idvIndexEdit\"\r\n                            placeholder=\"Enter country IDV index\"\r\n                            value={this.state.idvIndex}\r\n                            onChange={e => this.setState({ idvIndex: e.target.value })} />\r\n                    </div>\r\n\r\n                    <div className=\"form-check\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            className=\"form-check-input\"\r\n                            id=\"covidPositiveEdit\"\r\n                            checked={this.state.covidPositive}\r\n                            onChange={e => this.setState({ covidPositive: e.target.checked })} />\r\n                        <label className=\"form-check-label\" htmlFor=\"covidPositiveEdit\">Country is COVID-19 positive</label>\r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    <button type=\"submit\" className=\"btn btn-primary\" style={{margin: '0px 8px'}}>Accept</button>\r\n                    <button type=\"button\" className=\"btn btn-warning\" style={{margin: '0px 8px'}} onClick={this.props.closeModal}>Back</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditCountryForm;","import React, { Component } from 'react';\r\nimport ImageWrapper from '../../components/ImageWrapper/ImageWrapper';\r\nimport classes from './Country.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport NewCountryForm from './NewCountryForm/NewCountryForm';\r\nimport CountryTable from './CountryTable/CountryTable';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport EditCountryForm from './EditCountryForm/EditCountryForm';\r\nimport axios from '../../axios';\r\n\r\n\r\nclass Country extends Component {\r\n\r\n    state = {\r\n        countries: null,\r\n        modalOpen: false,\r\n        selectedCountry: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"country/get/all\")\r\n            .then(res => {\r\n                this.setState({ countries: res.data });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    openModal = (country) => {\r\n        this.setState({ modalOpen: true, selectedCountry: country });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ modalOpen: false });\r\n    }\r\n\r\n    addNewCountry = (newCountry) => {\r\n        let countries = [...this.state.countries];\r\n        countries.push(newCountry);\r\n        this.setState({ countries: countries });\r\n    }\r\n\r\n    updateCountry = country => {\r\n        for (let i = 0; i < this.state.countries.length; i++) {\r\n            if(country.id === this.state.countries[i].id){\r\n                let countries = [...this.state.countries];\r\n                countries[i] = country;\r\n                this.setState({countries: countries});\r\n            }\r\n        }\r\n        this.closeModal();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ImageWrapper />\r\n                <div className={classes.menu}>\r\n                    <ul>\r\n                        <li><Link to=\"/\">Home</Link></li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className={classes.Form + \" col\"}>\r\n                            <h5 style={{ textAlign: \"center\" }}>Add new country</h5>\r\n                            <NewCountryForm addNewCountry={this.addNewCountry} />\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <h5 style={{ textAlign: \"center\" }}>Country list</h5>\r\n                            <CountryTable openModal={this.openModal} countries={this.state.countries} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <Modal show={this.state.modalOpen} modalClosed={() => this.closeModal()}>\r\n                    {this.state.selectedCountry ? <EditCountryForm\r\n                        country={this.state.selectedCountry}\r\n                        updateCountry={this.updateCountry}\r\n                        closeModal={this.closeModal}\r\n                    /> : null}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Country;","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n\r\n    let inputElement = null;\r\n\r\n    const inputClasses = [classes.inputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ') +  props.elementConfig.type === 'checkbox' ? null : \" form-control\"}\r\n                style={props.elementConfig.type === \"checkbox\" ? {marginTop: '13px'} : null}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                id={props.id} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                rows=\"3\" cols=\"60\"\r\n                className={inputClasses.join(' ') + \" form-control\"}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                id={props.id} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select\r\n                className={inputClasses.join(' ') + \" form-control\"}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                id={props.id}>\r\n                    <option value=\"\" defaultValue hidden></option>\r\n                {props.elementConfig.options.map(option => {\r\n                    return <option value={option.value} key={option.value}>{option.displayValue}</option>\r\n                })}\r\n            </select>\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ') + \" form-control\"}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed}\r\n                id={props.id} />\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-group row\">\r\n            <label className=\"col-form-label\" htmlFor={props.id} style={{marginRight: '15px'}}>{props.label}</label>\r\n            <div>\r\n                {inputElement}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import React, { Component } from 'react';\r\nimport Input from '../../../components/UI/Input/Input';\r\n// import classes from './NewPatientForm.module.css';\r\nimport axios from '../../../axios';\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\nclass NewPatientForm extends Component {\r\n\r\n    state = {\r\n        form: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Firstname'\r\n                },\r\n                validation: {},\r\n                value: '',\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Firstname: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            lastName: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Lastname'\r\n                },\r\n                validation: {},\r\n                value: '',\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Lastname: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            countryId: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: []\r\n                },\r\n                validation: {},\r\n                value: '',\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Country:',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            covidPositiveContact: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Had contact with COVID-19: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hasCold: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has cold: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            lastFever: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Last fever'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Last fever: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            respiratoryRate: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Respiratory rate'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Respiratory rate: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hypoxia: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has hypoxia: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hasSoreThroat: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has sore throat: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hasCough: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has cough: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hasDyspnea: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has dyspnea: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hasTachypnea: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has tachypnea: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            acl: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'ALC'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Absolute lymphocite count: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            pneumonia: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has pneumonia: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            oxygenSaturation: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Oxygen saturation'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Oxygen saturation: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            nonHospitalPneumonia: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has non hospital pneumonia: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n        },\r\n        countriesVisited: [],\r\n        countriesSelected: [],\r\n        contactedPatients: [],\r\n        patientsSelected: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"country/get/all\")\r\n            .then(res => {\r\n                const countryOptions = res.data.map(country => {\r\n                    return {\r\n                        value: country.id,\r\n                        displayValue: country.countryName\r\n                    };\r\n                })\r\n                const visitedCountries = res.data.map(country => {\r\n                    return {\r\n                        label: country.countryName,\r\n                        value: country.id\r\n                    };\r\n                })\r\n                const updatedForm = { ...this.state.form };\r\n                const updatedElement = { ...updatedForm.countryId };\r\n                const updatedElementConfig = { ...updatedElement.elementConfig };\r\n                updatedElementConfig.options = [...countryOptions];\r\n                updatedElement.elementConfig = updatedElementConfig;\r\n                updatedForm.countryId = updatedElement;\r\n                this.setState({ form: updatedForm, countriesVisited: visitedCountries });\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        axios.get(\"api/patient/get/all\")\r\n            .then(res => {\r\n                const contactedPatients = res.data.map(p => {\r\n                    return {\r\n                        label: p.name + \" \" + p.lastName,\r\n                        value: p.id\r\n                    };\r\n                })\r\n\r\n                this.setState({contactedPatients: contactedPatients});\r\n            })\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedForm = { ...this.state.form };\r\n\r\n        const updatedFormElement = { ...updatedForm[inputIdentifier] };\r\n\r\n        if (updatedFormElement.elementConfig.type === \"checkbox\") {\r\n            updatedFormElement.value = event.target.checked;\r\n            console.log(updatedFormElement.value);\r\n        } else {\r\n            updatedFormElement.value = event.target.value;\r\n        }\r\n        // updatedFormElement.valid = checkFormValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n\r\n        updatedForm[inputIdentifier] = updatedFormElement;\r\n\r\n        // let formIsValid = true;\r\n        // for (let input in updatedForm) {\r\n        //     formIsValid = updatedForm[input].valid && formIsValid;\r\n        // }\r\n\r\n        this.setState({ form: updatedForm });\r\n    }\r\n\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let formData = {};\r\n\r\n        for (let formElementIdentifier in this.state.form) {\r\n            if (formElementIdentifier === \"country\") {\r\n                continue;\r\n            }\r\n            formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\r\n        }\r\n\r\n        const cSelected = this.state.countriesSelected.map(c => c.value);\r\n\r\n        const pSelected = this.state.patientsSelected.map(p => p.value);\r\n\r\n\r\n        formData = { ...formData, countriesVisited: cSelected, contactedPatients: pSelected };\r\n\r\n        console.log(formData);\r\n\r\n        axios.post('api/getCurringMeasures', formData)\r\n            .then(res => {\r\n                alert(\"Patient added succesfully.\");\r\n\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n\r\n        for (let key in this.state.form) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            formElementsArray.map(formElement => {\r\n                return <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    label={formElement.config.label}\r\n                    id={formElement.id}\r\n                />\r\n            })\r\n        );\r\n\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.onFormSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"countriesSelect\">Countries visited:</label>\r\n                        <div>\r\n                            <MultiSelect\r\n                                options={this.state.countriesVisited}\r\n                                value={this.state.countriesSelected}\r\n                                onChange={sel => this.setState({ countriesSelected: sel })}\r\n                                labelledBy={\"Visited countries\"}\r\n                                id=\"countriesSelect\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"patientsSelect\">Patients contacted:</label>\r\n                        <div>\r\n                            <MultiSelect\r\n                                options={this.state.contactedPatients}\r\n                                value={this.state.patientsSelected}\r\n                                onChange={sel => this.setState({ patientsSelected: sel })}\r\n                                labelledBy={\"Patients contacted\"}\r\n                                id=\"patientsSelect\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {form}\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewPatientForm;","import React from 'react';\r\nimport classes from './PatientTable.module.css';\r\n\r\nconst PatientTable = (props) => {\r\n\r\n    let table = null;\r\n\r\n    if (props.patients) {\r\n        table = (\r\n            <table className=\"table\">\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Lastname</th>\r\n                        <th scope=\"col\">Has Covid</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody className={classes.Hover}>\r\n                    {props.patients.map((p, index) => {\r\n                        return <tr key={p.id} onClick={() => props.openModal(p)}>\r\n                            <th scope=\"row\">{index + 1}</th>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.lastName}</td>\r\n                            <td>{p.covidStatus === \"POSITIVE\" ? \"YES\" : \"NO\"}</td>\r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    } else {\r\n        table = <p>Loading...</p>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {table}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PatientTable;","import React, { Component } from 'react';\r\n// import classes from './EditPatientForm.module.css';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport axios from '../../../axios';\r\n\r\nclass EditPatientForm extends Component {\r\n\r\n    state = {\r\n        form: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Firstname'\r\n                },\r\n                validation: {},\r\n                value: this.props.patient.name,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Firstname: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            lastname: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Lastname'\r\n                },\r\n                validation: {},\r\n                value: this.props.patient.lastname,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Lastname: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            country: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: []\r\n                },\r\n                validation: {},\r\n                value: '',\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Country:',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            covidPositiveContact: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Had contact with COVID-19: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            cold: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has cold: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            lastFever: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Last fever'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Last fever: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            respiratoryRate: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Respiratory rate'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Respiratory rate: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            hypoxia: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has hypoxia: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            soreThroat: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has sore throat: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            cough: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has cough: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            dyspnea: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has dyspnea: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            tachypnea: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has tachypnea: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            alc: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'ALC'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Absolute lymphocite count: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            pneumonia: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has pneumonia: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            oxygenSaturation: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'number',\r\n                    placeholder: 'Oxygen saturation'\r\n                },\r\n                validation: {},\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Oxygen saturation: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n            nonHospitalPneumonia: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'checkbox'\r\n                },\r\n                validation: {},\r\n                value: false,\r\n                valid: true,\r\n                touched: false,\r\n                label: 'Has non hospital pneumonia: ',\r\n                show: false,\r\n                loading: false\r\n            },\r\n        },\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"country/get/all\")\r\n            .then(res => {\r\n                const countryOptions = res.data.map(country => {\r\n                    return {\r\n                        value: country.countryName,\r\n                        displayValue: country.countryName\r\n                    };\r\n                })\r\n                const updatedForm = { ...this.state.form };\r\n                const updatedElement = { ...updatedForm.country };\r\n                const updatedElementConfig = { ...updatedElement.elementConfig };\r\n                updatedElementConfig.options = [...countryOptions];\r\n                updatedElement.elementConfig = updatedElementConfig;\r\n                updatedForm.country = updatedElement;\r\n                this.setState({ form: updatedForm });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedForm = { ...this.state.form };\r\n\r\n        const updatedFormElement = { ...updatedForm[inputIdentifier] };\r\n\r\n        console.log(updatedFormElement);\r\n        if (updatedFormElement.elementConfig.type === \"checkbox\") {\r\n            updatedFormElement.value = event.target.checked;\r\n            console.log(updatedFormElement.value);\r\n        } else {\r\n            updatedFormElement.value = event.target.value;\r\n        }\r\n        updatedFormElement.touched = true;\r\n\r\n        updatedForm[inputIdentifier] = updatedFormElement;\r\n\r\n        this.setState({ form: updatedForm });\r\n    }\r\n\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        const formData = {};\r\n\r\n        for (let formElementIdentifier in this.state.form) {\r\n            formData[formElementIdentifier] = this.state.form[formElementIdentifier].value;\r\n        }\r\n\r\n        console.log(formData);\r\n        //update patient\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const formElementsArray = [];\r\n\r\n        for (let key in this.state.form) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.form[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n            formElementsArray.map(formElement => {\r\n                return <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    label={formElement.config.label}\r\n                    id={formElement.id}\r\n                />\r\n            })\r\n        );\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.onFormSubmit}>\r\n                    <h5 style={{textAlign: 'center'}}>Edit Patient</h5>\r\n                    <hr />\r\n                    {form}\r\n                    <hr />\r\n                    <div className=\"row\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\" style={{margin: '0px 8px'}}>Accept</button>\r\n                        <button type=\"button\" className=\"btn btn-warning\" style={{margin: '0px 8px'}} onClick={this.props.closeModal}>Back</button>\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditPatientForm;","import React, { Component } from 'react';\r\nimport ImageWrapper from '../../components/ImageWrapper/ImageWrapper';\r\nimport classes from './Patient.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport NewPatientForm from './NewPatientForm/NewPatientForm';\r\nimport PatientTable from './PatientTable/PatientTable';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport EditPatientForm from './EditPatientForm/EditPatientForm';\r\nimport axios from '../../axios';\r\n\r\nclass Patient extends Component {\r\n\r\n    state = {\r\n        patients: null,\r\n        modalOpen: false,\r\n        selectedPatient: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"api/patient/get/all\")\r\n            .then(res => this.setState({patients: res.data}))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    openModal = (patient) => {\r\n        this.setState({ modalOpen: true, selectedPatient: patient });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ modalOpen: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ImageWrapper />\r\n                <div className={classes.menu}>\r\n                    <ul>\r\n                        <li><Link to=\"/\">Home</Link></li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className={classes.Form + \" col\"}>\r\n                            <h5 style={{ textAlign: \"center\" }}>Add new Patient</h5>\r\n                            <NewPatientForm />\r\n                        </div>\r\n                        <div className=\"col\">\r\n                            <h5 style={{ textAlign: \"center\" }}>Patient list</h5>\r\n                            <PatientTable patients={this.state.patients} openModal={this.openModal}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Modal show={this.state.modalOpen} modalClosed={() => this.closeModal()}>\r\n                    {this.state.selectedPatient ? <EditPatientForm patient={this.state.selectedPatient} closeModal={this.closeModal}/> : null}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Patient;","import React, { Component } from 'react';\r\nimport classes from './NewUser.module.css';\r\nimport ImageWrapper from '../../components/ImageWrapper/ImageWrapper';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from '../../axios';\r\n\r\nclass NewUser extends Component {\r\n\r\n    state = {\r\n        username: '',\r\n        password: '',\r\n        role: 1\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        let user = {...this.state};\r\n\r\n        axios.post('api/register', user)\r\n            .then(res => {\r\n                console.log(res);\r\n                alert(\"User registered successfully.\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Error\");\r\n            });\r\n\r\n        console.log(this.state);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ImageWrapper />\r\n\r\n                <div className={classes.menu}>\r\n                    <ul>\r\n                        <li><Link to=\"/\">Home</Link></li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div className=\"container\" style={{ margin: 'auto', textAlign: 'center' }}>\r\n                    <h5>Register new Doctor or Administrator</h5>\r\n\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className={classes.Form + \" col\"}>\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"username\">Username</label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            id=\"username\"\r\n                                            placeholder=\"Enter username\"\r\n                                            value={this.state.username}\r\n                                            onChange={e => this.setState({username: e.target.value})}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"password\">Password</label>\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            className=\"form-control\"\r\n                                            id=\"password\"\r\n                                            placeholder=\"Enter password\"\r\n                                            value={this.state.password}\r\n                                            onChange={e => this.setState({password: e.target.value})}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"role\">Role select</label>\r\n                                        <select className=\"form-control\" id=\"role\" onChange={e => this.setState({role: e.target.value})}>\r\n                                            <option value=\"1\" defaultValue>Doctor</option>\r\n                                            <option value=\"2\">Administrator</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <br />\r\n\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Register</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewUser;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Login from './containers/Login/Login';\nimport Home from './containers/Home/Home';\nimport Country from './containers/Country/Country';\nimport Patient from './containers/Patient/Patient';\nimport NewUser from './containers/NewUser/NewUser';\n\n\nfunction App(props) {\n  return (\n    \n      <BrowserRouter>\n        <Switch>\n            <Route path=\"/login\" exact component={Login} />\n            <Route path=\"/country\" component={Country} />\n            <Route path=\"/patient\" component={Patient} />\n            <Route path=\"/new-user\" component={NewUser} />\n            <Route path=\"/\" component={Home}/>\n        </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}